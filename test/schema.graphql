type Factory {
  id: ID! # factory address + "-" + chain ID
  address: String! # factory address
  chainId: Int! # chain ID
  isV2: Boolean!
  poolCount: BigInt! # amount of pools created
  txCount: BigInt! # amoutn of transactions all time
  totalVolumeUSD: BigDecimal! # total volume all time in derived USD
  totalVolumeETH: BigDecimal! # total volume all time in derived ETH
  owner: String! # current owner of the factory
}

# stores for USD calculations
type Bundle {
  id: ID! # chain ID
  ethPriceUSD: BigDecimal! # price of ETH in usd
}

type Token {
  id: ID! # tokenAddress + "-" + chainId
  address: String! # token address
  chainId: Int! # chain ID of the token
  symbol: String! # token symbol
  name: String! # token name
  decimals: Int! # token decimals
  # totalSupply: BigInt! # token total supply
  volume: BigDecimal! # volume in token units
  volumeUSD: BigDecimal! # volume in derived USD
  untrackedVolumeUSD: BigDecimal! # volume in USD even on pools with less reliable USD values
  txCount: BigInt! # transactions across all pools that include this token
  # Note: for chains where ETH is not the native token, this will be the derived
  # price of that chain's native token, effectively, this should be renamed
  # derivedNative
  derivedETH: BigDecimal!
  whitelistPools: [String!]! # pools token is in that are white listed for USD pricing
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token") # derived fields
}

type Pool {
  id: ID! # pool address + "-" + chainId
  address: String! # pool address
  chainId: Int! # chain ID of the pool
  isV2: Boolean!
  createdAtTimestamp: Int! # creation
  createdAtBlockNumber: Int! # block pool was created at
  token0: Token! # token0
  token1: Token! # token1
  feeTier: BigInt! # fee amount
  liquidity: BigInt! # in range liquidity
  sqrtPrice: BigInt! # current price tracker
  token0Price: BigDecimal! # token0 per token1
  token1Price: BigDecimal! # token1 per token0
  reserve0: BigDecimal! # reserve0
  reserve1: BigDecimal! # reserve1
  tick: BigInt # current tick
  observationIndex: BigInt! # current observation index
  volumeToken0: BigDecimal! # all time token0 swapped
  volumeToken1: BigDecimal! # all time token1 swapped
  volumeUSD: BigDecimal! # all time USD swapped
  untrackedVolumeUSD: BigDecimal! # all time USD swapped, unfiltered for unreliable USD pools
  txCount: BigInt! # all time number of transactions
  totalValueLockedToken0: BigDecimal! # total token 0 across all ticks
  totalValueLockedToken1: BigDecimal! # total token 1 across all ticks
  totalValueLockedETH: BigDecimal! # tvl derived ETH
  totalValueLockedUSD: BigDecimal! # tvl USD
  totalValueLockedUSDUntracked: BigDecimal! # TVL derived in USD untracked
  liquidityProviderCount: BigInt! # Fields used to help derived relationship - used to detect new exchanges
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool") # hourly snapshots of pool data
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool") # daily snapshots of pool data
  # derived fields
  ticks: [Tick!]! @derivedFrom(field: "pool")
}

type Tick {
  id: ID! # poolAddress + "#" + tickIndex + "-" + chainId
  poolAddress: String # pool address
  tickIdx: BigInt! # tick index
  chainId: Int! # chain ID of the pool
  pool: Pool! # pointer to pool
  liquidityGross: BigInt! # total liquidity pool has as tick lower or upper
  liquidityNet: BigInt! # how much liquidity changes when tick crossed
  price0: BigDecimal! # calculated price of token0 of tick within this pool - constant
  price1: BigDecimal! # calculated price of token1 of tick within this pool - constant
  createdAtTimestamp: Int! # created time
  createdAtBlockNumber: Int! # created block
}

# Data accumulated and condensed into day stats for each pool
type PoolDayData {
  id: ID! # poolAddress + "-" + dayId + "-" + chainId
  chainId: Int! # chain ID of the Day
  date: Int! # timestamp rounded to current day by dividing by 86400
  pool: Pool! # pointer to pool
  liquidity: BigInt! # in range liquidity at end of period
  sqrtPrice: BigInt! # current price tracker at end of period
  token0Price: BigDecimal! # price of token0 - derived from sqrtPrice
  token1Price: BigDecimal! # price of token1 - derived from sqrtPrice
  reserve0: BigDecimal! # reserve0
  reserve1: BigDecimal! # reserve1
  tick: BigInt # current tick at end of period
  tvlUSD: BigDecimal! # tvl derived in USD at end of period
  volumeToken0: BigDecimal! # volume in token0
  volumeToken1: BigDecimal! # volume in token1
  volumeUSD: BigDecimal! # volume in USD
  txCount: BigInt! # numebr of transactions during period
  openPrice: BigDecimal! # opening price of token0 - Can't be called open because it's a reserved word
  high: BigDecimal! # high price of token0
  low: BigDecimal! # low price of token0
  close: BigDecimal! # close price of token0
}

# hourly stats tracker for pool
type PoolHourData {
  id: ID! # poolAddress + "-" + timestamp + "-" + chainId
  chainId: Int! # chain ID of the hour
  periodStartUnix: Int! # unix timestamp for start of hour
  pool: Pool! # pointer to pool
  liquidity: BigInt! # in range liquidity at end of period
  sqrtPrice: BigInt! # current price tracker at end of period
  token0Price: BigDecimal! # price of token0 - derived from sqrtPrice
  token1Price: BigDecimal! # price of token1 - derived from sqrtPrice
  reserve0: BigDecimal! # reserve0
  reserve1: BigDecimal! # reserve1
  tick: BigInt # current tick at end of period
  tvlUSD: BigDecimal! # tvl derived in USD at end of period
  volumeToken0: BigDecimal! # volume in token0
  volumeToken1: BigDecimal! # volume in token1
  volumeUSD: BigDecimal! # volume in USD
  txCount: BigInt! # numebr of transactions during period
  openPrice: BigDecimal! # opening price of token0 - Can't be called open because it's a reserved word
  high: BigDecimal! # high price of token0
  low: BigDecimal! # low price of token0
  close: BigDecimal! # close price of token0
}

type TokenDayData {
  id: ID! # tokenAddress + "-" + date + "-" + chainId
  chainId: Int! # chain ID of the Day
  date: Int! # timestamp rounded to current day by dividing by 86400
  token: Token! # pointer to token
  volume: BigDecimal! # volume in token units
  volumeUSD: BigDecimal! # volume in derived USD
  untrackedVolumeUSD: BigDecimal! # volume in USD even on pools with less reliable USD values
  priceUSD: BigDecimal! # price at end of period in USD
  openPrice: BigDecimal! # opening price USD - Can't be called open because it's a reserved word
  high: BigDecimal! # high price USD
  low: BigDecimal! # low price USD
  close: BigDecimal! # close price USD
}

type TokenHourData {
  id: ID! # tokenAddress + date + "-" + chainId
  chainId: Int! # chain ID of the hour
  periodStartUnix: Int! # unix timestamp for start of hour
  token: Token! # pointer to token
  volume: BigDecimal! # volume in token units
  volumeUSD: BigDecimal! # volume in derived USD
  untrackedVolumeUSD: BigDecimal! # volume in USD even on pools with less reliable USD values
  priceUSD: BigDecimal! # price at end of period in USD
  openPrice: BigDecimal! # opening price USD - Can't be called open because it's a reserved word
  high: BigDecimal! # high price USD
  low: BigDecimal! # low price USD
  close: BigDecimal! # close price USD
}
